using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Encoder_Helper_GUI
{
    public partial class Form_Settings : Form
    {

        private int RightClickedArgSettingsTab = -1;
        private TabControl lastTc = null;
        private List<VideoTabCollection> vidTab;
        private List<AudioTabCollection> audioTab;

        //For the contents of the tabs in the video settings
        //This is what needs to be edited for the tabs in the video settings to be changed
        //The settings here are all generated by the designer and copy pasted here for convenience
        private class VideoTabCollection
        {
            public VideoTabCollection()
            {
                // 
                // Label_x264_Args
                // 
                this.Label_x264_Args = new Label();
                this.Label_x264_Args.AutoSize = true;
                this.Label_x264_Args.Location = new System.Drawing.Point(6, 3);
                this.Label_x264_Args.Name = "Label_x264_Args";
                this.Label_x264_Args.Size = new System.Drawing.Size(83, 13);
                this.Label_x264_Args.TabIndex = 0;
                this.Label_x264_Args.Text = "x264 Arguments";
                // 
                // TextBox_x264_Args
                // 
                this.TextBox_x264_Args = new TextBox();
                this.TextBox_x264_Args.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)
                | System.Windows.Forms.AnchorStyles.Right)));
                this.TextBox_x264_Args.Location = new System.Drawing.Point(9, 20);
                this.TextBox_x264_Args.Multiline = true;
                this.TextBox_x264_Args.Name = "TextBox_x264_Args";
                this.TextBox_x264_Args.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
                this.TextBox_x264_Args.Size = new System.Drawing.Size(397, 77);
                this.TextBox_x264_Args.TabIndex = 1;
                // 
                // Label_Encoder
                // 
                this.Label_Encoder = new Label();
                this.Label_Encoder.AutoSize = true;
                this.Label_Encoder.Location = new System.Drawing.Point(6, 100);
                this.Label_Encoder.Name = "Label_Encoder";
                this.Label_Encoder.Size = new System.Drawing.Size(47, 13);
                this.Label_Encoder.TabIndex = 3;
                this.Label_Encoder.Text = "Encoder";
                // 
                // ComboBox_Encoder
                // 
                this.ComboBox_Encoder = new ComboBox();
                this.ComboBox_Encoder.FormattingEnabled = true;
                this.ComboBox_Encoder.Items.AddRange(new object[] {
                "x264 x86 8bit",
                "x264 x86 10bit",
                "x264 x64 8bit",
                "x264 x64 10bit"});
                this.ComboBox_Encoder.Location = new System.Drawing.Point(9, 116);
                this.ComboBox_Encoder.Name = "ComboBox_Encoder";
                this.ComboBox_Encoder.Size = new System.Drawing.Size(157, 21);
                this.ComboBox_Encoder.TabIndex = 2;
                this.ComboBox_Encoder.Text = "Select Encoder";
            }

            public void AttachToTab(TabPage tp)
            {
                tp.Controls.Add(Label_x264_Args);
                tp.Controls.Add(Label_Encoder);
                tp.Controls.Add(TextBox_x264_Args);
                tp.Controls.Add(ComboBox_Encoder);
            }

            public Label Label_x264_Args;
            public Label Label_Encoder;
            public TextBox TextBox_x264_Args;
            public ComboBox ComboBox_Encoder;
        }

        private class AudioTabCollection
        {
            public AudioTabCollection()
            {
                // 
                // Label_AudioQuality
                // 
                this.Label_AudioQuality = new Label();
                this.Label_AudioQuality.AutoSize = true;
                this.Label_AudioQuality.Location = new System.Drawing.Point(3, 3);
                this.Label_AudioQuality.Name = "Label_AudioQuality";
                this.Label_AudioQuality.Size = new System.Drawing.Size(39, 13);
                this.Label_AudioQuality.TabIndex = 0;
                this.Label_AudioQuality.Text = "Quality";
                // 
                // Label_AudioTrackName
                // 
                this.Label_AudioTrackName = new Label();
                this.Label_AudioTrackName.AutoSize = true;
                this.Label_AudioTrackName.Location = new System.Drawing.Point(6, 43);
                this.Label_AudioTrackName.Name = "Label_AudioTrackName";
                this.Label_AudioTrackName.Size = new System.Drawing.Size(96, 13);
                this.Label_AudioTrackName.TabIndex = 7;
                this.Label_AudioTrackName.Text = "Audio Track Name";
                // 
                // Label_LanguageCode
                // 
                this.Label_LanguageCode = new Label();
                this.Label_LanguageCode.AutoSize = true;
                this.Label_LanguageCode.Location = new System.Drawing.Point(202, 43);
                this.Label_LanguageCode.Name = "Label_LanguageCode";
                this.Label_LanguageCode.Size = new System.Drawing.Size(144, 13);
                this.Label_LanguageCode.TabIndex = 9;
                this.Label_LanguageCode.Text = "Audio Track Language Code";
                // 
                // NumericUpDown_Quality
                // 
                this.NumericUpDown_Quality = new NumericUpDown();
                this.NumericUpDown_Quality.DecimalPlaces = 2;
                this.NumericUpDown_Quality.Increment = new decimal(new int[] {
                    5,
                    0,
                    0,
                    131072});
                this.NumericUpDown_Quality.Location = new System.Drawing.Point(6, 20);
                this.NumericUpDown_Quality.Maximum = new decimal(new int[] {
                    1,
                    0,
                    0,
                    0});
                this.NumericUpDown_Quality.Name = "NumericUpDown_Quality";
                this.NumericUpDown_Quality.Size = new System.Drawing.Size(120, 20);
                this.NumericUpDown_Quality.TabIndex = 1;
                // 
                // TextBox_AudioTrackName
                // 
                this.TextBox_AudioTrackName = new TextBox();
                this.TextBox_AudioTrackName.Location = new System.Drawing.Point(6, 60);
                this.TextBox_AudioTrackName.Name = "TextBox_AudioTrackName";
                this.TextBox_AudioTrackName.Size = new System.Drawing.Size(169, 20);
                this.TextBox_AudioTrackName.TabIndex = 8;
                // 
                // TextBox_LanguageCode
                // 
                this.TextBox_LanguageCode = new TextBox();
                this.TextBox_LanguageCode.Location = new System.Drawing.Point(205, 60);
                this.TextBox_LanguageCode.Name = "TextBox_LanguageCode";
                this.TextBox_LanguageCode.Size = new System.Drawing.Size(180, 20);
                this.TextBox_LanguageCode.TabIndex = 10;
            }

            public void AttachToTab(TabPage tp)
            {
                tp.Controls.Add(Label_AudioQuality);
                tp.Controls.Add(Label_AudioTrackName);
                tp.Controls.Add(Label_LanguageCode);
                tp.Controls.Add(NumericUpDown_Quality);
                tp.Controls.Add(TextBox_AudioTrackName);
                tp.Controls.Add(TextBox_LanguageCode);
            }

            public Label Label_AudioQuality;
            public Label Label_AudioTrackName;
            public Label Label_LanguageCode;
            public NumericUpDown NumericUpDown_Quality;
            public TextBox TextBox_AudioTrackName;
            public TextBox TextBox_LanguageCode;
        }

        public Form_Settings()
        {
            InitializeComponent();
            vidTab = new List<VideoTabCollection>();
            vidTab.Add(new VideoTabCollection());
            TabControl_VideoArgSettings.TabPages.RemoveAt(0);
            //TabControl_VideoArgSettings.TabPages.Insert(0, new TabPage()); //I have no idea why this isn't working
            vidTab[0].AttachToTab(TabControl_VideoArgSettings.TabPages[0]);
            TabControl_VideoArgSettings.TabPages[0].Text = "1";
            TabControl_VideoArgSettings.TabPages.Add("    +"); //dumb hack because Insert() refuses to work

            audioTab = new List<AudioTabCollection>();
            audioTab.Add(new AudioTabCollection());
            TabControl_AudioArgSettings.TabPages.RemoveAt(0);
            audioTab[0].AttachToTab(TabControl_AudioArgSettings.TabPages[0]);
            TabControl_AudioArgSettings.TabPages[0].Text = "1";
            TabControl_AudioArgSettings.TabPages.Add("    +");
        }

        private void Button_Browse_x264_x86_8bit_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_x264_x86_8bit.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Browse_x264_x86_10bit_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_x264_x86_10bit.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Browse_x264_x64_8bit_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_x264_x64_8bit.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Browse_x264_x64_10bit_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_x264_x64_10bit.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Browse_MKVMerge_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_MKVMerge.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Browse_NeroAAC_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_NeroAAC.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Browse_BePipe_Click(object sender, EventArgs e)
        {
            var dialogResult = OpenFileDialog_Settings.ShowDialog();
            if (dialogResult == DialogResult.OK)
            {
                TextBox_BePipe.Text = OpenFileDialog_Settings.FileName;
            }
        }

        private void Button_Cancel_Settings_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void TabControl_AVSettings_SelectedIndexChanged(object sender, EventArgs e)
        {
            var tc = (TabControl)sender;

            if (tc.TabCount == tc.SelectedIndex + 1)
            {
                int numTabs = tc.TabCount;
                tc.TabPages.Insert(numTabs - 1, numTabs.ToString());
                if (TabControl_Settings.SelectedIndex == 0) //Video settings tab
                {
                    vidTab.Add(new VideoTabCollection());
                    vidTab[vidTab.Count - 1].AttachToTab(tc.TabPages[numTabs - 1]);
                }
                else //audio settings tab
                {
                    audioTab.Add(new AudioTabCollection());
                    audioTab[audioTab.Count - 1].AttachToTab(tc.TabPages[numTabs - 1]);
                }
                tc.TabPages[numTabs - 1].UseVisualStyleBackColor = true;
                tc.SelectTab(numTabs - 1);
            }
        }

        private void TabControl_AVSettings_MouseClick(object sender, MouseEventArgs e)
        {
            var tc = (TabControl)sender;

            if (e.Button == MouseButtons.Right && tc.TabCount != 2)
            {
                lastTc = tc;
                for (int i = 0; i < tc.TabCount - 1; i++)
                {
                    var rect = tc.GetTabRect(i);
                    if (rect.Contains(e.Location))
                    {
                        ContextMenuStrip_Tabs.Show(TabControl_VideoArgSettings, e.Location);
                        RightClickedArgSettingsTab = i;
                    }
                }
            }
        }

        private void StripMenuItem_DeleteTab_Click(object sender, EventArgs e)
        {
            for (int i = RightClickedArgSettingsTab + 1; i < lastTc.TabCount - 1; i++)
            {
                lastTc.TabPages[i].Text = i.ToString();
            }
            lastTc.TabPages.RemoveAt(RightClickedArgSettingsTab);
            if (TabControl_Settings.SelectedIndex == 0) //Video settings tab
            {
                vidTab.RemoveAt(RightClickedArgSettingsTab);
            }
            else
            {
                audioTab.RemoveAt(RightClickedArgSettingsTab);
            }
        }
    }
}
